
public class Problem5 {
	
	public static int[] interleave (int[] arr1, int[] arr2){
		int j = 0;
		int[] interleaveArray = new int[(arr1.length + arr2.length)];
		if(arr1.length == arr2.length){
			for(int i = 0; i < (arr1.length); i++){
				interleaveArray[2*i] = arr1[i];
				interleaveArray[2*i+1] = arr2[i];}
		}
		if(arr1.length < arr2.length){
			for(j = 0; j < arr1.length; j++){
				interleaveArray[2*j] = arr1[j];
				interleaveArray[2*j+1] = arr2[j];}
			for(int k = j; k < arr2.length; k++){
				interleaveArray[k + j] = arr2[k];}
		}
		if(arr2.length < arr1.length){
			for(j = 0; j < arr2.length; j++){
				interleaveArray[2*j] = arr1[j];
				interleaveArray[2*j+1] = arr2[j];}
			for(int k = j; k < arr1.length; k++){
				interleaveArray[k+j] = arr1[k];}
		}
		return interleaveArray;
	}
		public static void main(String[] args){
			int[] arr1 = {1,2,3};
			int[] arr2 = {5,6};
			int[] arr3 = interleave(arr1,arr2);
			
			for(int i = 0; i < arr3.length; i++){
				System.out.println(arr3[i]);}
	}
}

//Set of operations: arr1[i]
//Input of our model: the length of the int arrays
//Worst case: relative to the length of the array, all cases are the same
//T(n) = n+2
//T e ON, since T(n) will be bound by y = x

//In this case, the only variables we create are arr1, arr2 and arr3, the latter of which calls
//interleave on the lengths of arr1 and arr2. Throughout these processes, i, j and k are all
//created, however they do not scale to the size of the input. Therefore, the equation
//can be written as T(n) = n + n + 3 with a bound of y=x.

//Comparing the two, they just so happen to be the same in this case, however in most cases I imagine
//that the space complexity is the lower bound on time complexity. 
